shiny::runApp('GitHub/vzcd-shiny/app/VZ_Viewer')
runApp('GitHub/vzcd-shiny/app/VZ_Viewer')
# VZ Viewer Server Code
library(shinydashboard)
library(leaflet)
library(dplyr)
library(curl) # make the jsonlite suggested dependency explicit
library(sp)
library(rgeos)
library(sf)
# Set WD
work_dir <- "C:/Users/dotcid034/Documents/GitHub/vzcd-shiny/app/VZ_Viewer"
setwd(work_dir)
# Dictionary of Column Names
cols <- c('DISTRICT','NAME_ALF','NAME')
names(cols) <- c('cd_boundaries','cpa_boundaries','nc_boundaries')
# Load Data
hin <- rgdal::readOGR('data/json/High_Injury_Network.geojson', "OGRGeoJSON")
cd_boundaries <- rgdal::readOGR('data/shp/council_districts')
lapd_collisions <- rgdal::readOGR('data/shp/lapd_collisions')
pc <- rgdal::readOGR('data/shp/prioritized_corridors')
cpa_boundaries <- rgdal::readOGR('data/shp/community_planning_areas')
nc_boundaries <- rgdal::readOGR('data/shp/neighborhood_councils')
hin <- st_as_sf(hin)
cd_boundaries <- st_as_sf(cd_boundaries)
cd_boundaries[,"DISTRICT"]
cd_boundaries$DISTRICT
cd_boundaries["DISTRICT"]
cd_boundaries[['DISTRICT']]
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('mapview')
runApp()
webshot::install_phantomjs()
runApp()
