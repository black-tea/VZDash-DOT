test
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) %>%
#st_set_geometry(NULL) %>%
filter(severity == '1') %>%
group_by(mode, year) #%>%
#tally() %>%
#spread(year, n)
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) %>%
st_set_geometry(NULL) %>%
filter(severity == '1') %>%
group_by(mode, year) #%>%
#tally() %>%
View(lapd_collisions)
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) %>%
st_set_geometry(NULL) %>%
filter(severity == '1') %>%
group_by(mode, year)
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) #%>%
lapd_collisions <- read_sf('data/lapd_collisions/collisions.geojson') %>% mutate(year = 2018) %>% st_set_geometry(NULL)
collisions_2017 <- read_sf('data/lapd_collisions/2017collisions.geojson') %>% mutate(year = 2017) %>% st_set_geometry(NULL)
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) %>%
#st_set_geometry(NULL) %>%
filter(severity == '1') %>%
group_by(mode, year) %>%
tally() %>%
spread(year, n)
print(collisions_tbl)
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5), cex.lab = 0.5, cex.num = 0.5,
xlabels = c('1','2'))
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) %>%
replace_na(mode = 'Veh') %>%
#st_set_geometry(NULL) %>%
filter(severity == '1') %>%
group_by(mode, year) %>%
tally() %>%
spread(year, n)
print(collisions_tbl)
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5), cex.lab = 0.5, cex.num = 0.5,
xlabels = c('1','2'))
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) %>%
replace_na(mode = 'Veh') %>%
#st_set_geometry(NULL) %>%
filter(severity == '1') %>%
group_by(mode, year) %>%
tally() %>%
spread(year, n)
# Collisions
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) %>%
replace_na(list(mode = 'Veh')) %>%
#st_set_geometry(NULL) %>%
filter(severity == '1') %>%
group_by(mode, year) %>%
tally() %>%
spread(year, n)
print(collisions_tbl)
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5), cex.lab = 0.5, cex.num = 0.5,
xlabels = c('1','2'))
slopegraph(cancer, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5), cex.lab = 0.5, cex.num = 0.5,
xlabels = c('1','2'))
slopegraph(cancer, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5), cex.lab = 0.5, cex.num = 0.5,
xlabels = c('1','2','3','4'))
print(cancer)
print(type(cancer))
print(typeof(cancer))
View(cancer)
View(cancer)
View(collisions_tbl)
# Collisions
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) %>%
replace_na(list(mode = 'Veh')) %>%
#st_set_geometry(NULL) %>%
filter(severity == '1') %>%
group_by(mode, year) %>%
tally() %>%
spread(year, n) %>%
columns_to_rownames(mode)
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) %>%
replace_na(list(mode = 'Veh')) %>%
#st_set_geometry(NULL) %>%
filter(severity == '1') %>%
group_by(mode, year) %>%
tally() %>%
spread(year, n) %>%
column_to_rownames(mode)
library(tibble)
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) %>%
replace_na(list(mode = 'Veh')) %>%
#st_set_geometry(NULL) %>%
filter(severity == '1') %>%
group_by(mode, year) %>%
tally() %>%
spread(year, n) %>%
column_to_rownames(mode)
# Collisions
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) %>%
replace_na(list(mode = 'Veh')) %>%
#st_set_geometry(NULL) %>%
filter(severity == '1') %>%
group_by(mode, year) %>%
tally() %>%
spread(year, n) %>%
remove_rownames %>%
column_to_rownames(mode)
View(collisions_tbl)
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) %>%
replace_na(list(mode = 'Veh')) %>%
#st_set_geometry(NULL) %>%
filter(severity == '1') %>%
group_by(mode, year) %>%
tally() %>%
spread(year, n) %>%
remove_rownames %>%
column_to_rownames(var = 'mode')
View(collisions_tbl)
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5), cex.lab = 0.5, cex.num = 0.5,
xlabels = c('1','2','3','4'))
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5), cex.lab = 0.5, cex.num = 0.5,
xlabels = c('1','2'))
View(collisions_tbl)
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5), cex.lab = 0.5, cex.num = 0.5,
xlabels = c('2017','2018'))
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
#xlim = c(-.5,5.5), cex.lab = 0.5, cex.num = 0.5,
xlabels = c('2017','2018'))
typeof(collisions_tbl)
typeof(cancer)
View(collisions_tbl)
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
#xlim = c(-.5,5.5), cex.lab = 0.5, cex.num = 0.5,
xlabels = c('2017','2018'))
View(collisions_tbl)
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlabels = c('2017','2018'))
collisions_tbl$2017
collisions_tbl
View(collisions_tbl)
collisions_tbl$2017
cancer
cancer$Year.5
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) %>%
replace_na(list(mode = 'Veh')) %>%
#st_set_geometry(NULL) %>%
filter(severity == '1') %>%
group_by(mode, year) %>%
tally() %>%
spread(year, n) %>%
ungroup %>%
as.data.frame() %>%
remove_rownames %>%
column_to_rownames(var = 'mode')
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
#xlim = c(-.5,5.5), cex.lab = 0.5, cex.num = 0.5,
xlabels = c('2017','2018'))
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5), cex.lab = 0.5, cex.num = 0.5,
xlabels = c('2017','2018'))
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5), cex.lab = 0.5, cex.num = 0.5,
xlabels = c('2017','2018'),
main = 'Fatal Collisions YTD')
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
#xlim = c(-.5,5.5), cex.lab = 0.5, cex.num = 0.5,
xlabels = c('2017','2018'),
main = 'Fatal Collisions YTD')
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
#xlim = c(-.5,5.5),
cex.lab = 0.5, cex.num = 0.5,
xlabels = c('2017','2018'),
main = 'Fatal Collisions YTD')
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5), cex.lab = 0.5, cex.num = 0.5,
xlabels = c('2017','2018'),
main = 'Fatal Collisions YTD')
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
#xlim = c(-.5,5.5),
cex.lab = 0.5, cex.num = 0.5,
xlabels = c('2017','2018'),
main = 'Fatal Collisions YTD')
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
#xlim = c(-.5,5.5),
cex.lab = 0.8, cex.num = 0.5,
xlabels = c('2017','2018'),
main = 'Fatal Collisions YTD')
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
#xlim = c(-.5,5.5),
cex.lab = 0.8, cex.num = 0.8,
xlabels = c('2017','2018'),
main = 'Fatal Collisions YTD')
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
#xlim = c(-.5,5.5),
cex.lab = 0.8, cex.num = 0.7,
xlabels = c('2017','2018'),
main = 'Fatal Collisions YTD')
runApp()
runApp()
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
#xlim = c(-.5,5.5),
cex.lab = 0.8, cex.num = 0.7,
family = 'helvitca',
xlabels = c('2017','2018'),
main = 'Fatal Collisions YTD')
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5),
cex.lab = 0.5, cex.num = 0.5,
family = 'helvitca',
xlabels = c('2017','2018'),
main = 'Fatal Collisions YTD')
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5),
cex.lab = 0.5, cex.num = 0.5,
family = 'helvitca',
xlabels = c('2017','2018'))
# instead of 'main' argument, put title in box title instead
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5),
cex.lab = 0.5, cex.num = 0.5, cex.axis = 1.5,
family = 'helvitca',
xlabels = c('2017','2018'))
# instead of 'main' argument, put title in box title instead
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5),
cex.lab = 0.5, cex.num = 0.5,
family = 'helvitca',
xlabels = c('2017','2018'))
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
#xlim = c(-.5,5.5),
cex.lab = 0.5, cex.num = 0.5,
family = 'helvitca',
xlabels = c('2017','2018'))
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5),
cex.lab = 0.5, cex.num = 0.5,
family = 'Helvitca',
xlabels = c('2017','2018'))
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5),
cex.lab = 0.5, cex.num = 0.5,
#family = 'Helvitca',
xlabels = c('2017','2018'))
# instead of 'main' argument, put title in box title instead
slopegraph(collisions_tbl, col.lines = 'gray', col.lab = "black",
xlim = c(-.5,5.5),
cex.lab = 0.5, cex.num = 0.5,
family = 'Helvitca',
xlabels = c('2017','2018'))
runApp()
# Collisions
lapd_collisions <- read_sf('data/lapd_collisions/collisions.geojson') %>% mutate(year = 2018) #%>% st_set_geometry(NULL)
collisions_2017 <- read_sf('data/lapd_collisions/2017collisions.geojson') %>% mutate(year = 2017) #%>% st_set_geometry(NULL)
# Collisions
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) %>%
replace_na(list(mode = 'Veh')) %>%
st_set_geometry(NULL) %>%
filter(severity == '1') %>%
group_by(mode, year) %>%
tally() %>%
spread(year, n) %>%
ungroup %>%
as.data.frame() %>%
remove_rownames %>%
column_to_rownames(var = 'mode')
# Collisions
collisions_tbl <- lapd_collisions %>%
bind_rows(collisions_2017) %>%
replace_na(list(mode = 'Veh')) %>%
#st_set_geometry(NULL) %>%
filter(severity == '1') %>%
group_by(mode, year) %>%
tally() %>%
spread(year, n) %>%
ungroup %>%
as.data.frame() %>%
remove_rownames %>%
column_to_rownames(var = 'mode')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(sf)
library(dplyr)
library(httr)
library(RPostgreSQL)
# MO Codes
ped_inv_codes = '3003'
bike_inv_codes = c('3008', '3016', '3017', '3018')
mc_inv_codes = c('3009', '3013', '3014', '3015')
hit_and_run_codes = c('3029', '3030')
# Current Plan: Download only 2018 data (so there is not too much in memory)
# Next steps: Download entire dataset by (1) get length and (2) set limit to length and (3) save to Spatialite & query Spatialite
# sqlite would be better when I setup a container
# Access socrata api for collisions
# Metadata URL https://data.lacity.org/api/views/metadata/v1/k8cc-2d49
# Step 1: need to access the socrata API to get the length - number of records
response <- GET('https://data.lacity.org/resource/k8cc-2d49.json?$select=count(dr_no)')
record_ct <- content(response, 'parsed')[[1]][[1]]
# Step 2: make the request
#request = paste0('https://data.lacity.org/resource/k8cc-2d49.geojson?$limit=',record_ct)
#collisions = read_sf(request)
# Step 1&2 (current): Query for collisions since this year, with no limit
request = paste0('https://data.lacity.org/resource/k8cc-2d49.geojson?$where=date_extract_y(date_occ)=2018&$limit=',record_ct)
collisions = read_sf(request)
# Step 3: Clean MO Codes
geom_lapd_collisions <- collisions %>%
# rowwise() makes sure that the mutate operations don't use data from the entire df
rowwise() %>%
mutate(severity = case_when(grepl('3027',mocodes) ~ 1,
grepl('3024',mocodes) ~ 2,
grepl('3025',mocodes) ~ 3,
grepl('3026',mocodes) ~ 4,
grepl('3028',mocodes) ~ 0)) %>%
mutate(mode = case_when(any(sapply(ped_inv_codes, grepl, mocodes)) ~ 'Pedestrian',
any(sapply(bike_inv_codes, grepl, mocodes)) ~ 'Bicyclist',
any(sapply(mc_inv_codes, grepl, mocodes)) ~ 'Motorcyclist')) %>%
mutate(hit_and_run = ifelse(any(sapply(hit_and_run_codes, grepl, mocodes)),'Y',NA)) %>%
# remove rowwise operation
ungroup() %>%
# recast as sf object
st_sf()
# Export to geojson (future will dump to sqlite + spatailite)
#write_sf(geom_ladp_collisions, 'data/lapd_collisions/collisions.geojson')
#st_write(geom_lapd_collisions, 'data/lapd_collisions/collisions.geojson',delete_dsn = TRUE)
# Export to PostgreSQL
conn <- dbConnect(PostgreSQL(), host = "localhost", dbname = "dotdb", user="postgres", password="Feb241989", port = 5432)
st_write(conn, geom_lapd_collisions, drop = TRUE)
dbDisconnect(conn)
library(sf)
library(dplyr)
library(httr)
library(RPostgreSQL)
# MO Codes
ped_inv_codes = '3003'
bike_inv_codes = c('3008', '3016', '3017', '3018')
mc_inv_codes = c('3009', '3013', '3014', '3015')
hit_and_run_codes = c('3029', '3030')
# Current Plan: Download only 2018 data (so there is not too much in memory)
# Next steps: Download entire dataset by (1) get length and (2) set limit to length and (3) save to Spatialite & query Spatialite
# sqlite would be better when I setup a container
# Access socrata api for collisions
# Metadata URL https://data.lacity.org/api/views/metadata/v1/k8cc-2d49
# Step 1: need to access the socrata API to get the length - number of records
response <- GET('https://data.lacity.org/resource/k8cc-2d49.json?$select=count(dr_no)')
record_ct <- content(response, 'parsed')[[1]][[1]]
# Step 2: make the request
#request = paste0('https://data.lacity.org/resource/k8cc-2d49.geojson?$limit=',record_ct)
#collisions = read_sf(request)
# Step 1&2 (current): Query for collisions since this year, with no limit
request = paste0('https://data.lacity.org/resource/k8cc-2d49.geojson?$where=date_extract_y(date_occ)=2018&$limit=',record_ct)
collisions = read_sf(request)
# Step 3: Clean MO Codes
geom_lapd_collisions <- collisions %>%
# rowwise() makes sure that the mutate operations don't use data from the entire df
rowwise() %>%
mutate(severity = case_when(grepl('3027',mocodes) ~ 1,
grepl('3024',mocodes) ~ 2,
grepl('3025',mocodes) ~ 3,
grepl('3026',mocodes) ~ 4,
grepl('3028',mocodes) ~ 0)) %>%
mutate(mode = case_when(any(sapply(ped_inv_codes, grepl, mocodes)) ~ 'Pedestrian',
any(sapply(bike_inv_codes, grepl, mocodes)) ~ 'Bicyclist',
any(sapply(mc_inv_codes, grepl, mocodes)) ~ 'Motorcyclist')) %>%
mutate(hit_and_run = ifelse(any(sapply(hit_and_run_codes, grepl, mocodes)),'Y',NA)) %>%
# remove rowwise operation
ungroup() %>%
# recast as sf object
st_sf()
# Export to geojson (future will dump to sqlite + spatailite)
#write_sf(geom_ladp_collisions, 'data/lapd_collisions/collisions.geojson')
#st_write(geom_lapd_collisions, 'data/lapd_collisions/collisions.geojson',delete_dsn = TRUE)
# Export to PostgreSQL
conn <- dbConnect(PostgreSQL(), host = "localhost", dbname = "dotdb", user="postgres", password="Feb241989", port = 5432)
st_write(conn, geom_lapd_collisions)#, drop = TRUE)
dbDisconnect(conn)
# Export to PostgreSQL
conn <- dbConnect(PostgreSQL(), host = "localhost", dbname = "dotdb", user="postgres", password="Feb241989", port = 5432)
dbWriteTable(conn, name = 'public.geom_lapd_collisions', value = geom_lapd_collisions)#, drop = TRUE)
dbDisconnect(conn)
public.geom_lapd_collisions <- geom_lapd_collisions
# Export to PostgreSQL
conn <- dbConnect(PostgreSQL(), host = "localhost", dbname = "dotdb", user="postgres", password="Feb241989", port = 5432)
st_write(conn, public.geom_lapd_collisions)#, drop = TRUE)
dbDisconnect(conn)
public.geom_lapd_collisions <- geom_lapd_collisions
# Export to PostgreSQL
conn <- dbConnect(PostgreSQL(), host = "localhost", dbname = "dotdb", user="postgres", password="Feb241989", port = 5432)
st_write(conn, public.geom_lapd_collisions)#, drop = TRUE)
dbDisconnect(conn)
# Export to PostgreSQL
conn <- dbConnect(PostgreSQL(), host = "localhost", dbname = "dotdb", user="postgres", password="Feb241989", port = 5432)
sf::st_write_db(conn, geom_lapd_collisions, table = 'geom_lapd_collisions')
dbDisconnect(conn)
# Export to PostgreSQL
conn <- dbConnect(PostgreSQL(), host = "localhost", dbname = "dotdb", user="postgres", password="Feb241989", port = 5432)
sf::st_write_db(conn, geom_lapd_collisions, table = 'geom_lapd_collisions', drop=TRUE)
dbDisconnect(conn)
# Export to PostgreSQL
# see https://www.rdocumentation.org/packages/sf/versions/0.6-1/topics/st_write
conn <- dbConnect(PostgreSQL(), host = "localhost", dbname = "dotdb", user="postgres", password="Feb241989", port = 5432)
sf::st_write_db(conn, geom_lapd_collisions, table = 'geom_lapd_collisions', row.names=FALSE, drop=TRUE)
dbDisconnect(conn)
library(sf)
library(dplyr)
library(httr)
library(RPostgreSQL)
# MO Codes
ped_inv_codes = '3003'
bike_inv_codes = c('3008', '3016', '3017', '3018')
mc_inv_codes = c('3009', '3013', '3014', '3015')
hit_and_run_codes = c('3029', '3030')
# Current Plan: Download only 2018 data (so there is not too much in memory)
# Next steps: Download entire dataset by (1) get length and (2) set limit to length and (3) save to Spatialite & query Spatialite
# sqlite would be better when I setup a container
# Access socrata api for collisions
# Metadata URL https://data.lacity.org/api/views/metadata/v1/k8cc-2d49
# Step 1: need to access the socrata API to get the length - number of records
response <- GET('https://data.lacity.org/resource/k8cc-2d49.json?$select=count(dr_no)')
record_ct <- content(response, 'parsed')[[1]][[1]]
# Step 2: make the request
request = paste0('https://data.lacity.org/resource/k8cc-2d49.geojson?$limit=',record_ct)
collisions = read_sf(request)
# Step 1&2 (current): Query for collisions since this year, with no limit
#request = paste0('https://data.lacity.org/resource/k8cc-2d49.geojson?$where=date_extract_y(date_occ)=2018&$limit=',record_ct)
#collisions = read_sf(request)
# Step 3: Clean MO Codes
lapd_collisions <- collisions %>%
# rowwise() makes sure that the mutate operations don't use data from the entire df
rowwise() %>%
mutate(severity = case_when(grepl('3027',mocodes) ~ 1,
grepl('3024',mocodes) ~ 2,
grepl('3025',mocodes) ~ 3,
grepl('3026',mocodes) ~ 4,
grepl('3028',mocodes) ~ 0)) %>%
mutate(mode = case_when(any(sapply(ped_inv_codes, grepl, mocodes)) ~ 'Pedestrian',
any(sapply(bike_inv_codes, grepl, mocodes)) ~ 'Bicyclist',
any(sapply(mc_inv_codes, grepl, mocodes)) ~ 'Motorcyclist')) %>%
mutate(hit_and_run = ifelse(any(sapply(hit_and_run_codes, grepl, mocodes)),'Y',NA)) %>%
# remove rowwise operation
ungroup() %>%
# recast as sf object
st_sf()
# Export Method 1: Write to GeoJSON file
#st_write(lapd_collisions, 'data/lapd_collisions/collisions.geojson',delete_dsn = TRUE)
# Export Method 2: Write to PostgreSQL
# see https://www.rdocumentation.org/packages/sf/versions/0.6-1/topics/st_write
conn <- dbConnect(PostgreSQL(), host = "localhost", dbname = "dotdb", user="postgres", password="Feb241989", port = 5432)
sf::st_write_db(conn, lapd_collisions, table = 'geom_lapd_collisions', row.names=FALSE, drop=TRUE)
dbDisconnect(conn)
runApp()
runApp()
runApp()
runApp()
View(collisions_tbl)
View(collisions_2017)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/GitHub/Jonathans-Utilities/TPS')
runApp()
